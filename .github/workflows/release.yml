name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag (e.g., v1.2.3). Leave empty if using tag push"
        required: false
        type: string
      prerelease:
        description: "Mark this release as pre-release"
        required: false
        default: false
        type: boolean
      flutter_version:
        description: "Flutter version (optional, default stable)"
        required: false
        type: string

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref_name }}
  cancel-in-progress: false

env:
  FLUTTER_VERSION: ${{ github.event.inputs.flutter_version != '' && github.event.inputs.flutter_version || 'stable' }}
  TAG_NAME: ${{ github.event.inputs.tag != '' && github.event.inputs.tag || github.ref_name }}

jobs:
  build-android:
    name: Build Android APKs (split per ABI)
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept Android licenses
        run: yes | sdkmanager --licenses

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Flutter version
        run: flutter --version

      - name: Fetch dependencies
        run: flutter pub get

      - name: Build APKs (split per ABI)
        run: flutter build apk --release --split-per-abi

      - name: Prepare APK artifacts
        run: |
          mkdir -p dist
          for f in build/app/outputs/flutter-apk/app-*-release.apk; do
            base=$(basename "$f")
            abi=$(echo "$base" | sed -E 's/app-(.*)-release\.apk/\1/')
            cp "$f" "dist/word_learning-${abi}-${{ env.TAG_NAME }}.apk"
          done

      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: dist/*.apk
          if-no-files-found: error

  build-windows:
    name: Build Windows zip
    runs-on: windows-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Enable Windows desktop (idempotent)
        run: flutter config --enable-windows-desktop
        shell: pwsh

      - name: Fetch dependencies
        run: flutter pub get
        shell: pwsh

      - name: Build Windows (Release)
        run: flutter build windows --release
        shell: pwsh

      - name: Package zip
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          $zip = "dist/word_learning-windows-x64-${{ env.TAG_NAME }}.zip"
          Compress-Archive -Path "build/windows/x64/runner/Release/*" -DestinationPath $zip -Force
        shell: pwsh

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-zip
          path: dist/*.zip
          if-no-files-found: error

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-android, build-windows]
    steps:
      - name: Download Android artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: dist

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-zip
          path: dist

      - name: Publish Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Release ${{ env.TAG_NAME }}
          target_commitish: ${{ github.sha }}
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          generate_release_notes: true
          files: |
            dist/*.apk
            dist/*.zip
